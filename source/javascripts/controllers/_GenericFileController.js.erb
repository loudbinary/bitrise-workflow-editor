(function() {

"use strict";

angular.module("BitriseWorkflowEditor").controller("GenericFileController", function($q, $timeout, stringService, Progress, GenericFile) {

	var viewModel = this;

	var maximumFileSizeInMegabytes = 5;

	viewModel.genericFiles;
	viewModel.isAddMode = false;
	viewModel.loadGenericFilesProgress = new Progress();
	viewModel.uploadGenericFileProgress = new Progress();
	viewModel.genericFileActionProgress = new Progress();
	viewModel.genericFiles;
	viewModel.renamedGenericFile = null;
	var renamedGenericFileOriginalName;
	viewModel.uploadInstruction = stringService.stringReplacedWithParameters("<%= data[:strings][:code_signing][:generic_file][:upload_action] %>", {
		maximum_file_size_in_megabytes: maximumFileSizeInMegabytes
	});
	viewModel.uploadedGenericFile = new GenericFile();
	viewModel.uploadedGenericFile.name = "";
	viewModel.genericFileUploader;

	function loadGenericFiles() {
		viewModel.loadGenericFilesProgress.start("<%= data[:strings][:code_signing][:generic_file][:load_progress][:in_progress] %>");
		if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
			viewModel.uploadGenericFileProgress.reset();
		}

		// TODO: implement
		$timeout(function() {
			viewModel.genericFiles = _.times(5, function(index) {
				var genericFile = new GenericFile();
				genericFile.name = "generic-file-" + index;

				return genericFile;
			});

			viewModel.loadGenericFilesProgress.success();
		}, 2000);
	}

	viewModel.downloadURLEnvVarKey = function() {
		return "$BITRISEIO_" + (viewModel.uploadedGenericFile.name.length > 0 ? viewModel.uploadedGenericFile.name : "[<%= data[:strings][:code_signing][:generic_file][:id_specified] %>]") + "_URL";
	}

	viewModel.uploadGenericFile = function() {
		viewModel.uploadGenericFileProgress.start("<%= data[:strings][:code_signing][:generic_file][:upload_progress][:in_progress] %>");

		$q(function(resolve, reject) {
			if (viewModel.uploadedGenericFile.name.length == 0) {
				reject(new Error("<%= data[:strings][:code_signing][:generic_file][:upload][:no_id_specified] %>"));
			}
			else if (_.find(viewModel.genericFiles, {
				name: viewModel.uploadedGenericFile.name
			})) {
				reject(new Error("<%= data[:strings][:code_signing][:generic_file][:upload][:id_not_unique] %>"));
			}
			else {
				// TODO: implement
				$timeout(resolve, 2000);
			}
		}).then(function() {
			viewModel.genericFiles.push(viewModel.uploadedGenericFile);
			viewModel.uploadedGenericFile = new GenericFile();
			viewModel.uploadedGenericFile.name = "";

			viewModel.uploadGenericFileProgress.success("<%= data[:strings][:code_signing][:generic_file][:upload_progress][:success] %>");
		}, function(error) {
			viewModel.uploadGenericFileProgress.error(error);

			viewModel.genericFileUploader.$setPristine();
		});
	};

	viewModel.renameGenericFileSelected = function(genericFile) {
		viewModel.renamedGenericFile = genericFile;
		renamedGenericFileOriginalName = genericFile.name;

		if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
			viewModel.uploadGenericFileProgress.reset();
		}
	};

	viewModel.rename = function() {
		viewModel.genericFileActionProgress.start("<%= data[:strings][:code_signing][:generic_file][:rename_progress][:in_progress] %>");
		if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
			viewModel.uploadGenericFileProgress.reset();
		}

		// TODO: implement
		$timeout(function() {
			viewModel.renamedGenericFile = null;
			renamedGenericFileOriginalName = undefined;

			viewModel.genericFileActionProgress.success();
		}, 2000);
	};

	viewModel.cancelRename = function() {
		viewModel.renamedGenericFile.name = renamedGenericFileOriginalName;
		viewModel.renamedGenericFile = null;
		renamedGenericFileOriginalName = undefined;
	};

	viewModel.deleteGenericFile = function(genericFile) {
		viewModel.genericFileActionProgress.start("<%= data[:strings][:code_signing][:generic_file][:delete_progress][:in_progress] %>");
		if (viewModel.uploadGenericFileProgress.isIdle && viewModel.uploadGenericFileProgress.statusMessage !== null) {
			viewModel.uploadGenericFileProgress.reset();
		}

		// TODO: implement
		$timeout(function() {
			viewModel.genericFiles = _.without(viewModel.genericFiles, genericFile);
			viewModel.genericFileActionProgress.success();
		}, 2000);
	};

	viewModel.addGenericFileSelected = function() {
		viewModel.isAddMode = true;
	};

	loadGenericFiles();

});

})();
